module distributed;

import java.io.*;
import java.util.*;

behavior IdealHubStar{

	Double smallestMaxDistance;
	Vector hubStars;

	IdealHubStar() {
		smallestMaxDistance = new Double(Double.MAX_VALUE);
		hubStars = new Vector();
	}

	void findHubStars( Vector stars ) {
		// int length = stars.size();
		int length = 200;
		for (int i=0; i<length; i++) {
			Double maxDistance = new Double(-1.0);
			Star star1 = (Star) stars.get(i);
			for (int j=i+1; j<length; j++) {
				Star star2 = (Star) stars.get(j);
				double dist = star1.distance(star2);
				if (dist > maxDistance) {
					maxDistance = dist;
				}
			}
			if (maxDistance > 0 && maxDistance < smallestMaxDistance) {
				smallestMaxDistance = maxDistance;
				hubStars.clear();
				hubStars.add(star1);
			}
			else if (maxDistance == smallestMaxDistance) {
				hubStars.add(star1);
			}
		}
	}

	void print() {
		standardOutput<-println("d3    // minimum maximal distance is " + smallestMaxDistance);
		join {
			for (int i=0; i<hubStars.size(); i++) {
				Star c = (Star) hubStars.get(i);
				standardOutput<-println(c);
			}
		} @ standardOutput<-println();
	}
}