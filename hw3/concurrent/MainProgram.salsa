module concurrent;

import java.io.*;
import java.util.*;

behavior MainProgram{

	/* Runs all of the calculations defined in other behavior files */
	void act(String [] argv){

		String fileName = getInputFile(argv);
		standardOutput <- println(" the filename is "+ fileName);
		Vector stars = parse(fileName);
		for (int i=0; i<stars.size(); ++i){
			Vector tmpStar = stars.get(i);
			for (int j=0; j<tmpStar.size() ; ++j) {
				standardOutput <- print(tmpStar.get(j) + " ");	
			}
		}
		/* 
			creates new instance of each actor 
			TODO: let answers account for multiple answers
			note: may need to change scope (make global)
		*/
		// d1 = new ClosestNeighbors();
		// d2 = new FarthestNeighbors();
		// d3 = new IdealHubStar();
		// d4 = new IdealJailStar();
		// d5 = new IdealCapitalStar();

		//d1 print out
		standardOutput <- println("d1 // minimal pairwise distance");
		// d1.compute() @
		// standardOutput <- print(token);		

		//and so on for others...
	}

	Vector parse(String fileName){
		Vector ans = new Vector();
		String tempStar;
		try{
			BufferedReader in = new BufferedReader(new FileReader(fileName));
			int numStars = Integer.parseInt(in.readLine());
			while((tempStar = in.readLine()) != null){
				String[] tempStar2 = tempStar.split(" ");
				int x,y,z;
				x = Integer.parseInt(tempStar2[0]);
				y = Integer.parseInt(tempStar2[1]);
				z = Integer.parseInt(tempStar2[2]);
				Vector tmp = new Vector();
				tmp.add(x);
				tmp.add(y);
				tmp.add(z);
				ans.add(tmp);
			}
			in.close();
		}
		catch (IOException ioe){
			standardError <-println("ERROR: Can't open file "+fileName+" for reading.");
		}
		return ans;
	}

	//Read Arguments (Input File)
	String getInputFile(String [] argv){
		if (argv.length == 1){
			return argv[0];
		}
		else{
			standardError <- println("Usage: salsa PathToProgram/MainProgram InputFile");
			return "ERROR!";
		}
	}

	//combines strings, used when using token-passing continuation	
	String combineStrings(String s1, String s2){
		return s1+s2;
	}

}
