module distributed;

import java.io.*;
import java.util.*;

behavior MainProgram{
	String fileName;
	int noActors = 5;
	String nameServer = "localhost";
	String theatersFile = "theatersFile.txt";
	Vector stars = new Vector();

	/* Runs all of the calculations defined in other behavior files */
	void act(String [] argv){
		int argc = argv.length;
		if (argc < 1){
			standardError <- println("USAGE: salsa <MainActor> <input_file> <noActors> <nameServer> <theatersFile>");
			return;
		}
		if (argc >= 1) fileName = argv[0];
		if (argc >= 2) noActors = Integer.parseInt(argv[1]);
		if (argc >= 3) nameServer = argv[2];
		if (argc >= 4) theatersFile = argv[3];
		standardOutput <- println("fileName: " + fileName + ", noActors: " + noActors + ", nameServer: " + nameServer + ", theatersFile: " + theatersFile);
		DistributeWork();
	}

	void DistributeWork(){

		stars = (Vector) parse(fileName);

		//Create Actors
		Calculator[] calculations = new Calculator[noActors];
		for (int i=0; i<noActors; ++i){
			calculations[i] = new Calculator(i,stars);
		}

		
		//read available theaters
		Vector theaters = new Vector();
		String theater;
		try{
			BufferedReader in = new BufferedReader(new FileReader(theatersFile));
			while ((theater = in.readLine()) != null){
				theaters.add(theater);
			}
		} catch (IOException ioe){
			standardError<-println("ERROR: Can't open the file " + theatersFile + " for reading.");
		}

		//migrate actors to theaters
		for (int i=0; i<noActors; i++){
			standardOutput <- println("Sending actor " + 
				"uan://"+nameServer+":3030/d"+i+" to "+
				"rmsp://"+theaters.get(i%theaters.size())+"/d"+i);

			calculations[i] = new Calculator(i,stars) at
			(new UAN("uan://"+nameServer+":3030/d"+i),
			 new UAL("rmsp://"+theaters.get(i%theaters.size())+"/d"+i));
		}

		//computations
		for (int i=0; i<noActors; ++i){
			calculations[i] <- calculate();
		}
		
	}

	Vector parse(String fileName){
		Vector ans = new Vector();
		String tempStar;
		try{
			BufferedReader in = new BufferedReader(new FileReader(fileName));
			int numStars = Integer.parseInt(in.readLine());
			while((tempStar = in.readLine()) != null){
				String[] tempStar2 = tempStar.split(" ");
				double x,y,z;
				x = Double.valueOf(tempStar2[0]).doubleValue();
				y = Double.valueOf(tempStar2[1]).doubleValue();
				z = Double.valueOf(tempStar2[2]).doubleValue();
				Star tmp = new Star(x,y,z);
				ans.add(tmp);
			}
			in.close();
		}
		catch (IOException ioe){
			standardError <-println("ERROR: Can't open file "+fileName+" for reading.");
		}
		return ans;
	}

	//combines strings, used when using token-passing continuation	
	String combineStrings(String s1, String s2){
		return s1+s2;
	}

}
