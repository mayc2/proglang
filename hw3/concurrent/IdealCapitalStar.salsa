module concurrent;

import java.io.*;
import java.util.*;

behavior IdealCapitalStar{

	/*
	void act(String [] argv) {
	
	}
	*/

	void outputCapitalStars( Vector stars ) {
		findCapitalStars(stars) @
		standardOutput<-printStars(token);
	}

	void setDist( double dst, double src ) {
		dst = src;
	}

	Vector findCapitalStars( Vector stars ) {
		Double smallestAverage = new Double(Double.MAX_VALUE);
		Vector capitalStars = new Vector();

		int numDistances = 0;

		for (int i=0; i<stars.size(); i++) {
			double allDistances = 0.0;
			Star star1 = (Star) stars.get(i);
			for (int j=0; j<stars.size(); j++) {
				if (i==j) continue;
				Star star2 = (Star) stars.get(j);
				double dist = 0.0;
				star1<-distance(star2) @ setDist(dist, token);
				allDistances += dist;
				numDistances++;
			}
			// computer average distance
			Double avg = allDistances/numDistances;
			if (avg < smallestAverage) {
				smallestAverage = avg;
				capitalStars.clear();
				capitalStars.add(star1);
			}
			else if (avg == smallestAverage) {
				capitalStars.add(star1);
			}
		}

		return capitalStars;
	}

	void printStars( Vector capitals ) {
		for (int i=0; i<capitals.size(); i++) {
			Star c = (Star) capitals.get(i);
			standardOutput<-println(c);
		}
	}

}