module distributed;

import java.io.*;
import java.util.*;

behavior IdealJailStar{

	void findJailStars( Vector stars ) {
		Double largestMinDistance = new Double(Double.MIN_VALUE);
		Vector jailStars = new Vector();

		// int length = stars.size();
		int length = 100;
		for (int i=0; i<length; i++) {
			Double minDistance = new Double(Double.MAX_VALUE);
			Star star1 = (Star) stars.get(i);
			for (int j=0; j<length; j++) {
				if (i==j) continue;
				Star star2 = (Star) stars.get(j);
				double dist = star1.distance(star2);
				if (dist < minDistance) {
					minDistance = dist;
				}
			}
			if (minDistance > largestMinDistance) {
				largestMinDistance = minDistance;
				jailStars.clear();
				jailStars.add(star1);
			}
			else if (minDistance == largestMinDistance) {
				jailStars.add(star1);
			}
		}

		standardOutput<-println("maximum minimal distance: " + largestMinDistance) @
		printStars(jailStars);
	}

	void printStars( Vector jails ) {
		join {
			for (int i=0; i<jails.size(); i++) {
				Star c = (Star) jails.get(i);
				standardOutput<-println(c);
			}
		} @ standardOutput<-println();
	}

}