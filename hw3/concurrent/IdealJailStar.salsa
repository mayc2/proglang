module concurrent;

import java.io.*;
import java.util.*;

behavior IdealJailStar{

	void outputJailStars( Vector stars ) {
		findJailStars(stars) @
		standardOutput<-printStars(token);
	}

	void setDist( double dst, double src ) {
		dst = src;
	}

	Vector findJailStars( Vector stars ) {
		Double largestMinDistance = new Double(Double.MIN_VALUE);
		Vector jailStars = new Vector();

		for (int i=0; i<stars.size(); i++) {
			Double minDistance = new Double(Double.MAX_VALUE);
			Star star1 = (Star) stars.get(i);
			for (int j=0; j<stars.size(); j++) {
				if (i==j) continue;
				Star star2 = (Star) stars.get(j);
				double dist = 0.0;
				star1<-distance(star2) @ setDist(dist, token);
				if (dist < minDistance) {
					minDistance = dist;
				}
			}
			if (minDistance > largestMinDistance) {
				largestMinDistance = minDistance;
				jailStars.clear();
				jailStars.add(star1);
			}
			else if (minDistance == largestMinDistance) {
				jailStars.add(star1);
			}
		}

		return jailStars;
	}

	void printStars( Vector jails ) {
		for (int i=0; i<jails.size(); i++) {
			Star c = (Star) jails.get(i);
			standardOutput<-println(c);
		}
	}

}