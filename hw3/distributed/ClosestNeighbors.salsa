module distributed;

import java.io.*;
import java.util.*;

behavior ClosestNeighbors{
	Vector stars;
	Vector ans;
	double smallest;

	ClosestNeighbors(Vector s){	
		stars = s;
		ans = new Vector();
		smallest = 1000000000;
	}

	void findClosest(){
		// int length = stars.size();
		int length =200;
		for(int i=0; i<length; ++i){
			Star temp1 = (Star)stars.get(i);
			for (int j=i+1; j<length; ++j) {
				Star temp2 = (Star)stars.get(j);	
				double temp_dist = temp1.distance(temp2);
				// standardOutput <- println(temp2.toString());
				if (smallest > temp_dist){
					StarPair temp_pair = new StarPair(temp1,temp2);
					if (ans.size() != 0) ans.removeAllElements();
					ans.add(temp_pair);
					smallest = temp_dist;
				}
				else if (smallest == temp_dist){
					StarPair temp_pair = new StarPair(temp1,temp2);
					ans.add(temp_pair);
				}
			}	
		}
	}

	void print(){
		standardOutput <- println("d1    // minimal pairwise distance is " + smallest);
		for(int i=0; i<ans.size(); ++i){
			standardOutput <- println(ans.get(i).toString());
		}
	}
}
