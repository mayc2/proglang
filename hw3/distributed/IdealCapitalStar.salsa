module distributed;

import java.io.*;
import java.util.*;

behavior IdealCapitalStar{

	Double smallestAverage;
	Vector capitalStars;

	IdealCapitalStar() {
		smallestAverage = new Double(Double.MAX_VALUE);
		capitalStars = new Vector();
	}

	void findCapitalStars( Vector stars ) {
		// int length = stars.size();
		int length = 200;
		for (int i=0; i<length; i++) {
			int numDistances = 0;
			double allDistances = 0.0;
			Star star1 = (Star) stars.get(i);
			for (int j=0; j<length; j++) {
				Star star2 = (Star) stars.get(j);
				double dist = star1.distance(star2);
				allDistances += dist;
				numDistances++;
			}
			// computer average distance
			Double avg = allDistances/numDistances;
			if (avg < smallestAverage) {
				smallestAverage = avg;
				capitalStars.clear();
				capitalStars.add(star1);
			}
			else if (avg == smallestAverage) {
				capitalStars.add(star1);
			}
		}
	}

	void print() {
		standardOutput<-println("d5    // minimum average distance is " + smallestAverage) @
		join {
			for (int i=0; i<capitalStars.size(); i++) {
				Star c = (Star) capitalStars.get(i);
				standardOutput<-println(c.toString());
			}
		} @ standardOutput<-println();
	}

}