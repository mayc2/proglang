module distributed;

import java.io.*;
import java.util.*;

behavior IdealJailStar{

	Double largestMinDistance;
	Vector jailStars;

	IdealJailStar() {
		largestMinDistance = new Double(-1.0);
		jailStars = new Vector();
	}

	void findJailStars( Vector stars ) {
		// int length = stars.size();
		int length = 200;
		for (int i=0; i<length; i++) {
			Double minDistance = new Double(Double.MAX_VALUE);
			Star star1 = (Star) stars.get(i);
			for (int j=i+1; j<length; j++) {
				Star star2 = (Star) stars.get(j);
				double dist = star1.distance(star2);
				if (dist < minDistance) {
					minDistance = dist;
				}
			}
			if (minDistance > largestMinDistance) {
				largestMinDistance = minDistance;
				jailStars.clear();
				jailStars.add(star1);
			}
			else if (minDistance == largestMinDistance) {
				jailStars.add(star1);
			}
		}
	}

	void print() {
		standardOutput<-println("d4    // maximum minimal distance is " + largestMinDistance) @
		join {
			for (int i=0; i<jailStars.size(); i++) {
				Star c = (Star) jailStars.get(i);
				standardOutput<-println(c);
			}
		} @ standardOutput<-println();
	}
}